name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on any tag starting with 'v' (e.g., v1.0.0, v1.2.3)

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
      
      - name: Set up Python
        run: uv python install 3.13
      
      - name: Install dependencies
        run: uv sync --dev
      
      - name: Run tests
        run: uv run pytest test/ -v

  publish:
    needs: test
    runs-on: ubuntu-latest
    environment: 
      name: pypi
      url: https://pypi.org/p/credential-manager-mcp
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
      
      - name: Set up Python  
        run: uv python install 3.13
      
      - name: Verify version matches tag
        run: |
          # Extract version from pyproject.toml
          VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "Package version: $VERSION"
          echo "Tag version: $TAG_VERSION"
          if [ "$VERSION" != "$TAG_VERSION" ]; then
            echo "‚ùå Version mismatch! Package version ($VERSION) doesn't match tag ($TAG_VERSION)"
            exit 1
          fi
          echo "‚úÖ Version matches tag"
      
      - name: Build package
        run: uv build
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: |
            ## üöÄ Release ${{ github.ref_name }}

            ### Installation
            ```bash
            uvx credential-manager-mcp
            ```

            ### What's Changed
            - Version bump to ${{ github.ref_name }}
            - See commit history for detailed changes

            ### Configuration
            Add to your MCP client config:
            ```json
            {
              "mcpServers": {
                "credential-manager": {
                  "command": "uvx",
                  "args": ["credential-manager-mcp"],
                  "env": {
                    "CREDENTIAL_MANAGER_READ_ONLY": "false"
                  }
                }
              }
            }
            ```

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.ref_name }}...HEAD
          files: |
            ./dist/credential_manager_mcp-*.tar.gz
            ./dist/credential_manager_mcp-*-py3-none-any.whl
          draft: false
          prerelease: false 