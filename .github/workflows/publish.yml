name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on any tag starting with 'v' (e.g., v1.0.0, v1.2.3)

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
      
      - name: Set up Python
        run: uv python install 3.13
      
      - name: Install dependencies
        run: uv sync --dev
      
      - name: Run tests
        run: uv run pytest test/ -v

  publish:
    needs: test
    runs-on: ubuntu-latest
    environment: 
      name: pypi
      url: https://pypi.org/p/credential-manager-mcp
    permissions:
      id-token: write  # For trusted publishing
      contents: write  # For creating GitHub releases
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
      
      - name: Set up Python  
        run: uv python install 3.13
      
      - name: Verify version matches tag
        run: |
          # Extract version from pyproject.toml
          VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "Package version: $VERSION"
          echo "Tag version: $TAG_VERSION"
          if [ "$VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Version mismatch! Package version ($VERSION) doesn't match tag ($TAG_VERSION)"
            exit 1
          fi
          echo "✅ Version matches tag"
      
      - name: Build package
        run: uv build
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
      
      - name: Generate Changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG="${{ github.ref_name }}"
          
          echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
          
          # Create changelog directory
          mkdir -p docs/changelogs
          
          # Generate changelog and save to organized location
          {
            echo "## 🚀 Release $CURRENT_TAG"
            echo ""
            if [[ -n "$PREVIOUS_TAG" ]]; then
              echo "### What's Changed"
              git log --oneline --pretty=format:"- %s (%h)" "$PREVIOUS_TAG"..HEAD | head -20
            else
              echo "### What's New"
              echo "- Initial release of Credential Manager MCP Server"
              echo "- Secure API credential management with read-only mode by default"
              echo "- Multi-instance support with file locking"
              echo "- Simple JSON storage in ~/.credential-manager-mcp/"
            fi
            echo ""
            echo "### Installation"
            echo "\`\`\`bash"
            echo "uvx credential-manager-mcp"
            echo "\`\`\`"
            echo ""
            echo "### Configuration"
            echo "Add to your MCP client config:"
            echo "\`\`\`json"
            echo "{"
            echo "  \"mcpServers\": {"
            echo "    \"credential-manager\": {"
            echo "      \"command\": \"uvx\","
            echo "      \"args\": [\"credential-manager-mcp\"],"
            echo "      \"env\": {"
            echo "        \"CREDENTIAL_MANAGER_READ_ONLY\": \"false\""
            echo "      }"
            echo "    }"
            echo "  }"
            echo "}"
            echo "\`\`\`"
            if [[ -n "$PREVIOUS_TAG" ]]; then
              echo ""
              echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG"
            fi
          } | tee docs/changelogs/${CURRENT_TAG}.md
          
          # Set output for next step (use the saved file)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat docs/changelogs/${CURRENT_TAG}.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Changelog saved to docs/changelogs/${CURRENT_TAG}.md"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            ./dist/credential_manager_mcp-*.tar.gz
            ./dist/credential_manager_mcp-*-py3-none-any.whl
          draft: false
          prerelease: false 